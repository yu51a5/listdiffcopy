      def create_file_in_another_storage(self, ):
          
      # for all files on SFTP server ...
      for filename in all_sftp_files:
        storage_filename = storage_dir+'/'+filename
        sftp_filename = sftp_dir + "/" + filename
        # ... either create a new, if it's not on github ...
        if filename not in all_storage_files:
          with sftp_client.open(sftp_filename) as sftp_file:
            print(sftp_filename)
            storage.create_file(storage_filename, content=sftp_file.read())
          print('created ' + storage_filename)
        # ... or update an existing file ...
        elif storage.compare_stats_not_content():
          if storage.get_stats(storage_filename) != sftp_client.stats(sftp_filename):
            with sftp_client.open(sftp_filename) as sftp_file:
              storage.update_file(storage_filename, content=sftp_file.read())       
              print('updated ' + storage_filename)
        else:
          with sftp_client.open(sftp_filename) as sftp_file:
            sftp_contents = sftp_file.read() 
            if storage.get_contents(storage_filename) != sftp_contents: # ... but only if the new file is diffenent
              storage.update_file(storage_filename, content=sftp_contents)
              print('updated ' + storage_filename)\




                      kwargs.pop("fd", None)
        fields = list(kwargs.items())
        fields.extend(files)
        m = MultipartEncoder(fields=fields)
        resp = self.session.post(
            self.endpoint + method, data=m, headers={"Content-Type": m.content_type}
        )
        return resp.json()


  ###############################################################################
  def compare_and_update_a_file(self, my_filename, another_source, another_source_filename):

    compare_stats, comp_result = self._file_stats_are_comparable_and_same(
          my_filename=my_filename, another_source=another_source, another_source_filename=another_source_filename)
    if comp_result:
        return
      
    another_contents = another_source.get_contents(another_source_filename)
                                  
    if not compare_stats:
      with self.sftp_client.open(my_filename) as sftp_file:
        sftp_contents = sftp_file.read()
        if another_contents != sftp_contents:
          return

    self.update_file_given_content(filename=my_filename, content=another_contents)


  ###############################################################################
  def _update_file_in_another_source(self, my_filename, another_source,
                                     another_source_filename):
    compare_stats, comp_result = self._file_stats_are_comparable_and_same(
          my_filename=my_filename, another_source=another_source, another_source_filename=another_source_filename)
    if comp_result:
        return
    with self.sftp_client.open(my_filename) as sftp_file:
      sftp_contents = sftp_file.read()
      if compare_stats or (another_source.get_contents(another_source_filename) != sftp_contents):
        another_source.update_file_given_content(filename=another_source_filename, content=sftp_contents)